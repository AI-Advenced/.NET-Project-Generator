#!/usr/bin/env python3
"""
D√©monstration simple du g√©n√©rateur .NET am√©lior√©
G√©n√®re un projet Web API basique avec quelques entit√©s
"""

from enhanced_dotnet_generator import *


def create_simple_demo():
    """Cr√©e un projet de d√©monstration simple"""
    print("üöÄ G√©n√©ration d'un projet .NET Web API de d√©monstration")
    print("=" * 60)
    
    # Configuration d'entit√©s simples
    user_entity = EntityConfig(
        name="User",
        properties=[
            PropertyConfig("Id", "int", is_required=True, is_key=True),
            PropertyConfig("Email", "string", is_required=True, max_length=100),
            PropertyConfig("FirstName", "string", is_required=True, max_length=50),
            PropertyConfig("LastName", "string", is_required=True, max_length=50),
            PropertyConfig("CreatedDate", "DateTime", is_required=True),
            PropertyConfig("IsActive", "bool", is_required=True)
        ]
    )
    
    task_entity = EntityConfig(
        name="Task",
        properties=[
            PropertyConfig("Id", "int", is_required=True, is_key=True),
            PropertyConfig("Title", "string", is_required=True, max_length=200),
            PropertyConfig("Description", "string", max_length=1000),
            PropertyConfig("DueDate", "DateTime"),
            PropertyConfig("IsCompleted", "bool", is_required=True),
            PropertyConfig("Priority", "string", is_required=True, max_length=20),
            PropertyConfig("UserId", "int", is_required=True, foreign_table="User"),
            PropertyConfig("CreatedDate", "DateTime", is_required=True)
        ]
    )
    
    # Configuration du projet
    config = ProjectConfig(
        project_name="TaskManagerAPI",
        project_type=ProjectType.WEBAPI,
        output_path="./demo_output",
        include_database=True,
        database_provider=DatabaseProvider.SQLSERVER,
        connection_string="Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=TaskManagerDb;Integrated Security=True",
        entities=[user_entity, task_entity],
        include_swagger=True,
        include_cors=True,
        include_authentication=False,
        include_tests=True
    )
    
    # G√©n√©ration du projet
    generator = EnhancedDotNetGenerator()
    result = generator.generate_project(config)
    
    # Affichage du r√©sultat
    if result['success']:
        print(f"\n‚úÖ Projet '{config.project_name}' g√©n√©r√© avec succ√®s !")
        print(f"üìÅ Emplacement : {result['project_path']}")
        print(f"üìÑ Fichiers cr√©√©s : {len(result['files_created'])}")
        
        print(f"\nüìä D√©tails du projet :")
        print(f"   ‚Ä¢ Framework : .NET Framework 4.8")
        print(f"   ‚Ä¢ Type : Web API")
        print(f"   ‚Ä¢ Base de donn√©es : SQL Server")
        print(f"   ‚Ä¢ Entit√©s : User, Task")
        print(f"   ‚Ä¢ Swagger : Activ√©")
        print(f"   ‚Ä¢ CORS : Activ√©")
        print(f"   ‚Ä¢ Tests unitaires : Inclus")
        
        print(f"\nüåê Endpoints API g√©n√©r√©s :")
        print(f"   User API :")
        print(f"     ‚Ä¢ GET    /api/user")
        print(f"     ‚Ä¢ GET    /api/user/{{id}}")
        print(f"     ‚Ä¢ POST   /api/user")
        print(f"     ‚Ä¢ PUT    /api/user/{{id}}")
        print(f"     ‚Ä¢ DELETE /api/user/{{id}}")
        print(f"   ")
        print(f"   Task API :")
        print(f"     ‚Ä¢ GET    /api/task")
        print(f"     ‚Ä¢ GET    /api/task/{{id}}")
        print(f"     ‚Ä¢ POST   /api/task")
        print(f"     ‚Ä¢ PUT    /api/task/{{id}}")
        print(f"     ‚Ä¢ DELETE /api/task/{{id}}")
        
        print(f"\nüöÄ Prochaines √©tapes :")
        print(f"   1. Ouvrir Visual Studio 2015+")
        print(f"   2. Ouvrir {result['project_path']}/TaskManagerAPI.sln")
        print(f"   3. Restaurer les packages NuGet")
        print(f"   4. Compiler et ex√©cuter (F5)")
        print(f"   5. Acc√©der √† Swagger : http://localhost:[port]/swagger")
        
        print(f"\nüí° Exemple d'utilisation de l'API :")
        print(f"   # Cr√©er un utilisateur")
        print(f"   POST /api/user")
        print(f"   {{")
        print(f"     \"Email\": \"john.doe@example.com\",")
        print(f"     \"FirstName\": \"John\",")
        print(f"     \"LastName\": \"Doe\",")
        print(f"     \"CreatedDate\": \"2023-12-01T10:00:00\",")
        print(f"     \"IsActive\": true")
        print(f"   }}")
        print(f"   ")
        print(f"   # Cr√©er une t√¢che")
        print(f"   POST /api/task")
        print(f"   {{")
        print(f"     \"Title\": \"Terminer le projet\",")
        print(f"     \"Description\": \"Finaliser tous les composants\",")
        print(f"     \"DueDate\": \"2023-12-15T17:00:00\",")
        print(f"     \"IsCompleted\": false,")
        print(f"     \"Priority\": \"High\",")
        print(f"     \"UserId\": 1,")
        print(f"     \"CreatedDate\": \"2023-12-01T10:30:00\"")
        print(f"   }}")
        
        print(f"\nüìã Fichiers importants g√©n√©r√©s :")
        important_files = [
            "TaskManagerAPI.sln",
            "src/TaskManagerAPI/TaskManagerAPI.csproj", 
            "src/TaskManagerAPI/Web.config",
            "src/TaskManagerAPI/Global.asax.cs",
            "src/TaskManagerAPI/Models/User.cs",
            "src/TaskManagerAPI/Models/Task.cs",
            "src/TaskManagerAPI/Controllers/UserController.cs",
            "src/TaskManagerAPI/Controllers/TaskController.cs",
            "src/TaskManagerAPI/Services/UserService.cs",
            "src/TaskManagerAPI/Services/TaskService.cs",
            "src/TaskManagerAPI/Data/TaskManagerAPIContext.cs"
        ]
        
        for file in important_files:
            print(f"   ‚úì {file}")
        
    else:
        print(f"\n‚ùå Erreur lors de la g√©n√©ration : {result['error']}")
        return False
    
    return True


if __name__ == "__main__":
    try:
        success = create_simple_demo()
        
        if success:
            print(f"\nüéâ D√©monstration termin√©e avec succ√®s !")
            print(f"üìÇ Consultez le dossier './demo_output/TaskManagerAPI' pour voir le projet g√©n√©r√©")
        else:
            print(f"\n‚ùå √âchec de la d√©monstration")
            
    except Exception as e:
        print(f"\nüí• Erreur inattendue : {e}")
        import traceback
        traceback.print_exc()