#!/usr/bin/env python3
"""
Inspecteur de projets .NET g√©n√©r√©s
Analyse et affiche des informations sur les projets g√©n√©r√©s
"""

import os
from pathlib import Path
import xml.etree.ElementTree as ET
from typing import List, Dict, Any
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.tree import Tree
from rich.syntax import Syntax


console = Console()


class ProjectInspector:
    """Inspecteur pour analyser les projets .NET g√©n√©r√©s"""
    
    def __init__(self, project_path: str):
        self.project_path = Path(project_path)
        self.project_name = self.project_path.name
        
    def inspect_project(self):
        """Analyse compl√®te du projet"""
        if not self.project_path.exists():
            console.print(f"[red]‚ùå Projet non trouv√© : {self.project_path}[/red]")
            return
        
        console.print(Panel.fit(
            f"[bold blue]üîç Inspection du projet '{self.project_name}'[/bold blue]\n"
            f"[dim]Chemin : {self.project_path}[/dim]",
            title="[bold green]Projet Inspector[/bold green]"
        ))
        
        # Analyse de la structure
        self.show_project_structure()
        
        # Analyse des fichiers de configuration
        self.analyze_configuration_files()
        
        # Analyse des entit√©s
        self.analyze_entities()
        
        # Analyse des contr√¥leurs
        self.analyze_controllers()
        
        # Analyse des services
        self.analyze_services()
        
        # Analyse des tests
        self.analyze_tests()
        
        # R√©sum√©
        self.show_summary()
    
    def show_project_structure(self):
        """Affiche la structure du projet sous forme d'arbre"""
        console.print("\n[bold yellow]üìÅ Structure du projet[/bold yellow]")
        
        tree = Tree(f"[bold]{self.project_name}[/bold]")
        
        def add_directory_to_tree(path: Path, tree_node):
            try:
                for item in sorted(path.iterdir()):
                    if item.is_dir():
                        if item.name in ['.vs', 'bin', 'obj', 'packages']:
                            continue
                        dir_node = tree_node.add(f"[blue]üìÅ {item.name}/[/blue]")
                        add_directory_to_tree(item, dir_node)
                    elif item.is_file():
                        icon = self.get_file_icon(item.suffix)
                        tree_node.add(f"{icon} {item.name}")
            except PermissionError:
                tree_node.add("[red]‚ùå Acc√®s refus√©[/red]")
        
        add_directory_to_tree(self.project_path, tree)
        console.print(tree)
    
    def get_file_icon(self, extension: str) -> str:
        """Retourne une ic√¥ne bas√©e sur l'extension de fichier"""
        icons = {
            '.sln': 'üîß',
            '.csproj': 'üì¶',
            '.cs': 'üìÑ',
            '.config': '‚öôÔ∏è',
            '.json': 'üìã',
            '.xml': 'üìú',
            '.md': 'üìö',
            '.gitignore': 'üö´',
            '.asax': 'üåê'
        }
        return icons.get(extension.lower(), 'üìÑ')
    
    def analyze_configuration_files(self):
        """Analyse les fichiers de configuration"""
        console.print("\n[bold yellow]‚öôÔ∏è Fichiers de configuration[/bold yellow]")
        
        # Chercher les fichiers de configuration
        config_files = []
        
        # Solution file
        sln_files = list(self.project_path.glob("*.sln"))
        if sln_files:
            config_files.append(("Solution", sln_files[0]))
        
        # Project file
        csproj_files = list(self.project_path.glob("**/*.csproj"))
        if csproj_files:
            config_files.append(("Projet principal", csproj_files[0]))
        
        # Web.config
        web_config = self.project_path / "src" / self.project_name / "Web.config"
        if web_config.exists():
            config_files.append(("Configuration Web", web_config))
        
        # packages.config
        packages_config = self.project_path / "src" / self.project_name / "packages.config"
        if packages_config.exists():
            config_files.append(("Packages NuGet", packages_config))
        
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("Type", style="cyan")
        table.add_column("Fichier", style="green")
        table.add_column("Taille", style="yellow")
        table.add_column("Status", style="magenta")
        
        for config_type, config_file in config_files:
            if config_file.exists():
                size = f"{config_file.stat().st_size} bytes"
                status = "‚úÖ Trouv√©"
            else:
                size = "-"
                status = "‚ùå Manquant"
            
            table.add_row(config_type, str(config_file.name), size, status)
        
        console.print(table)
    
    def analyze_entities(self):
        """Analyse les entit√©s du mod√®le"""
        console.print("\n[bold yellow]üóÇÔ∏è Entit√©s du mod√®le[/bold yellow]")
        
        models_path = self.project_path / "src" / self.project_name / "Models"
        if not models_path.exists():
            console.print("[red]‚ùå Dossier Models non trouv√©[/red]")
            return
        
        entity_files = list(models_path.glob("*.cs"))
        
        if not entity_files:
            console.print("[red]‚ùå Aucune entit√© trouv√©e[/red]")
            return
        
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("Entit√©", style="cyan")
        table.add_column("Propri√©t√©s", style="green")
        table.add_column("Taille", style="yellow")
        
        for entity_file in entity_files:
            entity_name = entity_file.stem
            properties = self.count_properties_in_entity(entity_file)
            size = f"{entity_file.stat().st_size} bytes"
            
            table.add_row(entity_name, str(properties), size)
        
        console.print(table)
    
    def count_properties_in_entity(self, entity_file: Path) -> int:
        """Compte le nombre de propri√©t√©s dans une entit√©"""
        try:
            content = entity_file.read_text(encoding='utf-8')
            # Compte les lignes contenant "{ get; set; }"
            return content.count("{ get; set; }")
        except:
            return 0
    
    def analyze_controllers(self):
        """Analyse les contr√¥leurs"""
        console.print("\n[bold yellow]üéÆ Contr√¥leurs API[/bold yellow]")
        
        controllers_path = self.project_path / "src" / self.project_name / "Controllers"
        if not controllers_path.exists():
            console.print("[red]‚ùå Dossier Controllers non trouv√©[/red]")
            return
        
        controller_files = list(controllers_path.glob("*Controller.cs"))
        
        if not controller_files:
            console.print("[red]‚ùå Aucun contr√¥leur trouv√©[/red]")
            return
        
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("Contr√¥leur", style="cyan")
        table.add_column("Actions", style="green")
        table.add_column("Route", style="yellow")
        
        for controller_file in controller_files:
            controller_name = controller_file.stem
            actions = self.count_actions_in_controller(controller_file)
            route = self.extract_route_from_controller(controller_file)
            
            table.add_row(controller_name, str(actions), route)
        
        console.print(table)
    
    def count_actions_in_controller(self, controller_file: Path) -> int:
        """Compte le nombre d'actions dans un contr√¥leur"""
        try:
            content = controller_file.read_text(encoding='utf-8')
            # Compte les m√©thodes HTTP
            http_methods = ['[HttpGet]', '[HttpPost]', '[HttpPut]', '[HttpDelete]']
            return sum(content.count(method) for method in http_methods)
        except:
            return 0
    
    def extract_route_from_controller(self, controller_file: Path) -> str:
        """Extrait le pr√©fixe de route d'un contr√¥leur"""
        try:
            content = controller_file.read_text(encoding='utf-8')
            import re
            match = re.search(r'\\[RoutePrefix\\("([^"]+)"\\)\\]', content)
            return match.group(1) if match else "api/?"
        except:
            return "?"
    
    def analyze_services(self):
        """Analyse les services"""
        console.print("\n[bold yellow]‚öôÔ∏è Services m√©tier[/bold yellow]")
        
        services_path = self.project_path / "src" / self.project_name / "Services"
        if not services_path.exists():
            console.print("[red]‚ùå Dossier Services non trouv√©[/red]")
            return
        
        service_files = list(services_path.glob("*Service.cs"))
        interface_files = list(services_path.glob("I*Service.cs"))
        
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("Service", style="cyan")
        table.add_column("Interface", style="green")
        table.add_column("M√©thodes", style="yellow")
        
        for service_file in service_files:
            service_name = service_file.stem
            interface_name = f"I{service_name}"
            
            interface_exists = any(f.stem == interface_name for f in interface_files)
            methods = self.count_methods_in_service(service_file)
            
            table.add_row(
                service_name,
                "‚úÖ" if interface_exists else "‚ùå",
                str(methods)
            )
        
        console.print(table)
    
    def count_methods_in_service(self, service_file: Path) -> int:
        """Compte le nombre de m√©thodes dans un service"""
        try:
            content = service_file.read_text(encoding='utf-8')
            import re
            # Compte les m√©thodes publiques
            matches = re.findall(r'public .+\\(.*\\)', content)
            return len(matches)
        except:
            return 0
    
    def analyze_tests(self):
        """Analyse les tests unitaires"""
        console.print("\n[bold yellow]üß™ Tests unitaires[/bold yellow]")
        
        tests_path = self.project_path / "tests"
        if not tests_path.exists():
            console.print("[red]‚ùå Dossier tests non trouv√©[/red]")
            return
        
        test_files = list(tests_path.glob("**/*Tests.cs"))
        
        if not test_files:
            console.print("[red]‚ùå Aucun fichier de test trouv√©[/red]")
            return
        
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("Fichier de test", style="cyan")
        table.add_column("Tests", style="green")
        table.add_column("Type", style="yellow")
        
        for test_file in test_files:
            test_name = test_file.stem
            test_count = self.count_test_methods(test_file)
            test_type = "Service" if "Service" in test_name else "Controller" if "Controller" in test_name else "Autre"
            
            table.add_row(test_name, str(test_count), test_type)
        
        console.print(table)
    
    def count_test_methods(self, test_file: Path) -> int:
        """Compte le nombre de m√©thodes de test"""
        try:
            content = test_file.read_text(encoding='utf-8')
            return content.count("[TestMethod]")
        except:
            return 0
    
    def show_summary(self):
        """Affiche un r√©sum√© du projet"""
        console.print("\n[bold yellow]üìä R√©sum√© du projet[/bold yellow]")
        
        # Compter les diff√©rents √©l√©ments
        models_count = len(list((self.project_path / "src" / self.project_name / "Models").glob("*.cs"))) if (self.project_path / "src" / self.project_name / "Models").exists() else 0
        controllers_count = len(list((self.project_path / "src" / self.project_name / "Controllers").glob("*Controller.cs"))) if (self.project_path / "src" / self.project_name / "Controllers").exists() else 0
        services_count = len(list((self.project_path / "src" / self.project_name / "Services").glob("*Service.cs"))) if (self.project_path / "src" / self.project_name / "Services").exists() else 0
        tests_count = len(list((self.project_path / "tests").glob("**/*Tests.cs"))) if (self.project_path / "tests").exists() else 0
        
        # Calculer la taille totale
        total_size = sum(f.stat().st_size for f in self.project_path.rglob("*") if f.is_file())
        size_mb = total_size / (1024 * 1024)
        
        summary_table = Table(show_header=True, header_style="bold blue")
        summary_table.add_column("Composant", style="cyan")
        summary_table.add_column("Nombre", style="green")
        
        summary_table.add_row("Mod√®les/Entit√©s", str(models_count))
        summary_table.add_row("Contr√¥leurs API", str(controllers_count))
        summary_table.add_row("Services m√©tier", str(services_count))
        summary_table.add_row("Fichiers de tests", str(tests_count))
        summary_table.add_row("Taille totale", f"{size_mb:.2f} MB")
        
        console.print(summary_table)
        
        # Instructions pour utiliser le projet
        console.print(Panel.fit(
            "[bold green]üöÄ Instructions d'utilisation :[/bold green]\n\n"
            f"1. Ouvrir Visual Studio 2015 ou version ult√©rieure\n"
            f"2. Fichier ‚Üí Ouvrir ‚Üí Projet/Solution\n"
            f"3. S√©lectionner '{self.project_name}.sln'\n"
            f"4. Clic droit sur la solution ‚Üí 'Restore NuGet Packages'\n"
            f"5. Build ‚Üí Build Solution (Ctrl+Shift+B)\n"
            f"6. Debug ‚Üí Start Debugging (F5)\n\n"
            f"[yellow]üí° Une fois d√©marr√© :[/yellow]\n"
            f"‚Ä¢ API accessible √† : http://localhost:[port]/api/\n"
            f"‚Ä¢ Documentation Swagger : http://localhost:[port]/swagger\n"
            f"‚Ä¢ Tests : Test ‚Üí Run All Tests",
            title="[bold blue]Guide de d√©marrage[/bold blue]"
        ))


def main():
    """Fonction principale"""
    import sys
    
    if len(sys.argv) != 2:
        console.print("[red]‚ùå Usage : python project_inspector.py <chemin_du_projet>[/red]")
        console.print("[yellow]üí° Exemple : python project_inspector.py ./generated_projects/ECommerceAPI[/yellow]")
        return 1
    
    project_path = sys.argv[1]
    inspector = ProjectInspector(project_path)
    inspector.inspect_project()
    
    return 0


if __name__ == "__main__":
    try:
        from rich.console import Console
        from rich.table import Table
        from rich.panel import Panel
        from rich.tree import Tree
        
    except ImportError:
        print("‚ùå Module 'rich' requis. Installation : pip install rich")
        exit(1)
    
    exit(main())